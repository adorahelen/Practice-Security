- UserDetails (유저 엔티티에 구현)
    스프링 시큐리티에서 사용자를 정의하는 모델
    스프링 시큐리티가 이해하는 방식으로 사용자를 나타내기 위한 모델
    하나 이상의 권한(GrantedAuthority)을 가진다

    [UserDetails]
    기능 목록
    getUsername()
    getPassword()
    getAuthorities()
    isAccountNonExpired()
    isAccountNonLocked()
    isCredentialsNonExpired()
    isEnabled()

- UserDetailsService (유저 서비스에 구현)
    사용자 이름으로 검색하는 역할
    인증을 완료하는데 있어서 반드시 필요한 유일한 작업
    재정의 후 Bean 등록

    [UserDetailsService]
    public interface UserDetailsService {
        UserDetails loadUserByUsername(String username) throws UsernameNotFoundException;
    }
    딱히 추가적인 기능은 없고 해당 사용자가 존재하는지 여부만 판별한다
    UserRepository를 이용하여 사용자 존재 여부의 로직을 구현하면 된다
    =>
    public interface UserRepository extends JpaRepository<User, Long> {
        Optional<User> findByPhoneNumber(String PhoneNumber);


- UserDetailsManager
    UserDetailsService 상속받아 추가적인 작업 수행 가능
    사용자 추가, 수정, 삭제 작업

- FormLogin
  사용자가 로그인 하지 않았으면 로그인 양식으로 redirect된다

  http.formLogin() 사용

  defaultSuccessUrl 설정
  AuthenticationSuccessHandler 구현 - .successHandler()
  AuthenticationFailureHandler 구현 - .failureHandler()
  Handler를 통해 추후 행동에 대해 명시할 수 있다


[etc]
* 사용자를 인증하는 기능만 필요한 경우 UserDetailsService만,
    구현하면 필요한 기능을 제공할 수 있다

* PasswordEncoder : 암호 검증, 암호화 역할을 함
public interface PasswordEncoder {
  String encode(CharSequence rawPassword); // 암호화
  boolean matches(CharSequence rawPassword, String encodedPassword); // 검증
  default boolean upgradeEncoding(String encodedPassword) { // 보안 향상을 위해 재 인코딩
      return false;
  }
  제공되는 옵션
  NoOpPasswordEncoder: 암호화 하지 않음
  StandardPasswordEncoder: SHA-256 사용
  Pbkdf2PasswordEncoder: PBKDF2 사용
  BCryptPasswordEncoder: bcrypt 해싱 함수 사용
  SCryptPasswordEncoder: scrypt 해싱 함수 사용
}
* PasswordEncoder나 UserDetailsService를 직접 등록을 하나만 한 경우 오류, 두개를 같이 등록


