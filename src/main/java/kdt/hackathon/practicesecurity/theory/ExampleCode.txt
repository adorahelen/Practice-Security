1. 시큐리티 환경 설정
@Configuration
 public class SecurityConfig {

    @Bean
    public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {
        http.csrf().disable();

        http.authorizeHttpRequests()
                .mvcMatchers("/loginhome").authenticated()
                .anyRequest().permitAll();

        http.formLogin()
                .loginPage("/login")
                /*.successHandler((request, response, authentication) -> {
                    response.sendRedirect("/loginhome");
                })*/
                .defaultSuccessUrl("/loginhome");
        return http.build();
    }
}

2. 엔티티
User
@Entity
@Getter
@NoArgsConstructor
@Table(name = "USERS")
public class User {

    @Id
    @GeneratedValue(strategy = IDENTITY)
    private Long id;

    private String email;
    private String name;
    private String password;

    public User(String email, String name, String password) {
        this.email = email;
        this.name = name;
        this.password = password;
    }
}

3. 유저디테일'스' 예시
UserDetails
@RequiredArgsConstructor
public class CustomUser implements UserDetails {

    private final User user;
    @Override
    public Collection<? extends GrantedAuthority> getAuthorities() {
        return List.of(() -> "ROLE_USER");
    }

    @Override
    public String getPassword() {
        return user.getPassword();
    }

    @Override
    public String getUsername() {
        return user.getName();
    }
    //생략, 보통 엔티티에 implemants
}

4. 패스 인코더
PasswordEncoder
기본 제공 BCryptPasswordEncoder
@Bean
public PasswordEncoder passwordEncoder(){
    return new BCryptPasswordEncoder();
}

5. UserDetailsService
@RequiredArgsConstructor
public class UserService implements UserDetailsService {

    private final UserRepository userRepository;
    private final PasswordEncoder passwordEncoder;

    @Override
    public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {
        User user = userRepository.findUserByEmail(username);
        return new CustomUser(user);
    }

    public void saveUSer(SignUpRequest request) {
        User user = request.toEntity(passwordEncoder);
        userRepository.save(user);
    }
}

6. AuthenticationProvider : 인증 요청을 처리할 때 사용
    * Spring Security는 기본적으로 **DaoAuthenticationProvider**를 사용하여 사용자 인증을 처리
    * 없어도 기본적인 로그인 및 인증/인가 기능이 동작하는 이유는 Spring Security가 자체적으로 제공
@RequiredArgsConstructor
public class CustomAuthenticationProvider implements AuthenticationProvider {
Spring Security는 기본적으로 **DaoAuthenticationProvider**를 사용하여 사용자 인증을 처리
    private final UserService userService;
    private final PasswordEncoder passwordEncoder;

    @Override
    public Authentication authenticate(Authentication authentication) throws AuthenticationException {
        String username = authentication.getName();
        String password = authentication.getPrincipal().toString();
        UserDetails user = userService.loadUserByUsername(username);

        if (passwordEncoder.matches(password, user.getPassword())) {
            return new UsernamePasswordAuthenticationToken(
                    user.getUsername(),
                    user.getPassword(),
                    user.getAuthorities()
            );
        }
        throw new BadCredentialsException("BAD Credentials");
    }

    @Override
    public boolean supports(Class<?> authentication) {
        return authentication.isAssignableFrom(UsernamePasswordAuthenticationToken.class);
    }
}

7. BeanConfig
@Configuration
@RequiredArgsConstructor
public class ProjectBeanConfig {

    private final UserRepository userRepository;

    @Bean
    public AuthenticationProvider authenticationProvider(){
        return new CustomAuthenticationProvider(userService(), passwordEncoder());
    }

    @Bean
    public PasswordEncoder passwordEncoder(){
        return new BCryptPasswordEncoder();
    }

    @Bean
    public UserService userService() {
        return new UserService(userRepository, passwordEncoder());
    }
}

 **DaoAuthenticationProvider**의 역할
	•	DaoAuthenticationProvider는 Spring Security에서 가장 일반적으로 사용되는 인증 제공자입니다.
	    UserDetailsService를 사용하여 사용자 정보를 로드하고, 비밀번호 인코더(예: BCryptPasswordEncoder)로 비밀번호를 확인합니다.
	•	Spring Security 설정에서 UserDetailsService와 PasswordEncoder만 제대로 설정되어 있다면,
	    별도의 CustomAuthenticationProvider 없이도 인증이 가능합니다.
=> CustomAuthenticationProvider는 특정 인증 로직을 커스터마이징하거나, 특수한 비즈니스 요구사항이 있을 때 사용