[ 시스템 보안 6가지] ===================================================================
1. 계정관리
- 윈도우에서는 어드민, 유저, 게스트 등으로 관리하고 있음
2. 세션관리
- 세션은 '사용자와 시스템 사이 또는 두 시스템 사이의 활성화된 접속을 의미한다.'
    * 세션 관리는, 일정 시간이 지나면 세션을 종료하고 비인가자의 세션 가로채기를 통제한다.
    * 비자 같은 느낌 (목적에 따라 체류기간이 명시된)
    * 지속적인 인증 문제 (타임아웃 설정으로 보완)
3. 접근제어 : 시스템에 대한, 네트워크적 관점의 통제
4. 권한관리 :각 사용자가 적절한 권한으로, 적절한 정보 자산에 접근 할 수 있도록 통제하는 것
5. 로그관리
- AAA 라고도 부른다.(인증 Authentication->인가 Authorization->어카운팅:기록을 남기는것 [객체, 파일])
6, 취약점관리 : 시스템 자체의 결함 관리

[네트워크 보안 중 세션 파트] ====================================================
05. 세션 하이재킹 공격
: 두 시스템 간의 연결이 활성화된 상태, 즉 로그인된 상태를 가로채는 공격이다.
    * TCP 통신 중인 상황에서 <- RST 패킷을 보내
        일시적으로 TCP 세션을 끊고 시퀸스 넘버를 새로 생성하여 세션을 빼앗어 인증을 회피한다.

 보안 공격 [크게 두가지로 분류된다.] ==============================================
 1. 서비스 못하게 만드는 공격[Dos, DDos] => 상해죄
 2. 정보를 유출시키는 공격 [스니핑, 스푸핑, 세션하이재킹] => 절도죄

웹 보안 =================================================
1. SQL 인젝션 =>
- ORM으로 주로 쓰이는 Spring boot JPA에서도 injection공격이 통할까?
=> stackOverFlow에 따르면 입력받은 값이 그 자체로 JPA에서는 value로 사용되기 때문에 injection이 불가하다고 한다.

2. 패스워드 암호화 =>
- 평문으로 저장하는건 자살행위, 헤쉬 변환을 시킨다 한들 이번 카카오 처럼 SALT 적용을 안시키면 거의 무의미함
=> 스프링 시큐리티 내부에서 제공하는 "bCryptPasswordEncoder" 는 자동으로 SALT 추가하여 해싱을 통해 암호화

암호학 ===================================================================================
- 암호문 cipher text : 비밀을 유지하기 위해 당사자만 알 수 있도록 꾸민 약속 기호
- 평문 plain text : 암호와 반대되는 말, 누구나 알 수 있게 쓴 일반적인 글
- 암호화 encryption : 평문 -> 암호문 전환
- 복호화 decryption : 암호문 -> 평문 전환
    * 암호화나 복호화 시 알고있어야 할 수단(암호화 알고리즘)
    * 이때 약속한 규칙(암호화 키)
- 해시 : 정보의 위조 혹은 변조를 확인하기 위한 것, 다시 말해 정보의 무결성을 확인하기 위한 것이다.
    * 대칭/비대칭 암호화 기법(<-> 비밀키,공개키)과 해시를 함께 사용하여, 다양한 전자상거래 기능을 구현함
    * 파일구조 시간에 배웠듯이, 처음은 데이터베이스의 탐색을 효과적으로 구현하기 위해 만들어짐
    * 즉 디비에서는 빠른 탐색을 위해 사용, 보안에서는 데이터 무결성 확인을 위해(해시 값이 조금만 달라져도 데이터 다름)
- 해시의 종류 :
    1. MD 알고리즘
    2. SHA : 미국 국가안보국이 만듬, MD가 발전한 형태, SHA-256 많이 사용


비밀번호 해시 ====================================================
- 공격자가 해시된 암호를 검색하여(레인보우 테이블), 무차별 대입 공격 or 완전 검색(가능한 모든 암호 시도)을 시도하는 경우
    => 솔트 salt를 통해 해결
- 해쉬 함수 빠르면, 공격자는 이를 악용하여 무차별 대입을 할 수 있다.
    => 의도적으로 느리게 설계된 암호 해시로 해결[Bcrypt, Scrypt, PBKDF2, Argon2]
