1. application.yml ㅇㅔ 환경변수 저장하고 (깃 x)

2. config/jwt/jwtProperties 에서 가지고옴 (@ConfigurationProperties("jwt")
    : yml 에서 작성해 놓은 값들을 호출하지 않고, 담겨있는 jwtProperties 를 호출함

3. config/jwt/TokenProvider 에서 복수의 메소드 작성
    * 토큰 생성 메소드 : makeToken
            이때 .claim("id", user.getId()) 를 통해 유저 아이디를 토큰에 담는다.
        - 기존에 작성된 코드의 경우 이 유저 아이디가 Long 타입이지만, 현 프로젝트의 경우 ULID 적용으로 인해 String)

    * 토큰 유효성 검증 메서드 : validToken

    * 토큰 기반으로 인증 정보를 가져와 반환하는 메서드 : getAuthentication

    * 토큰 기반으로 유저 아이디를 가져오는 메소드 : getUserID
        - 이때 토큰을 기반으로 유저 아이디를 가지고 오는데,
            테스트에서 설정한 유저 아이디는 Long 이었지만, 실제 사용중이 유저 아이디는 String 이기 때문에
            : 두가지 버전의 메소드를 미리 만들어 두었다. (getUserIdLongToken & getUserIdStringToken)

=============================================================================================
위에 3개는 필수적인 세팅 클래스,
아래 두 클래스는 테스트 클래스, (JwtFactory, jwtTest)
그 다음은 리프레쉬 토큰을 위한 클래스
=============================================================================================

인증 코드를 받으면 -> 이를 액세스 토큰으로 교환해야 한다.

: 브라우저에서 요청 -> 서버에서 쿠기 설정 및 할당 -> 브라우저에서 쿠기 저장 (삭제 안하면 계속 남아 있음)




9월 26일 오후 3시 14분
// public class OAuth2UserCustomService
        // 데이터베이스에서 사용자 조회, 없으면 새로 생성, 근데 이건 오스 유저를 디비에 넣는거니까
        // 기본 (일반) 회원가입 유저들과는 다르게 디비에 담기게 될것
        User user = userRepository.findByEmail(email)
                .map(entity -> entity.update(name))  // 네임을 업데이트
                .orElse(User.builder()
                        .email(email)
                        .nickname(name)
                        .build());
        // 이 코드는 그러면, 디비에 사용자 이름이 있으면 업데이트(뭐를?)
        // 없으면 이메일과 이름만을(닉네임)을 가지고 회원을 생성한 다음 디비에 저장한다.

        // 즉 디비에는 두가지 회원 양상이 나타나게 될 것임
        // 1. 회원가입을 통해 모든 정보를 가지고 있는 회원
        // 2. 구글 혹은 카카오에서 보내주는 정보만 가지고 있는 회원
        // => 추후 다른게 정상적으로 진행된다면, 구글이나 카카오에서 제공해주는 정보를 늘리고. 이 부분 빌더 패턴 수정하면 될듯
        return userRepository.save(user);




